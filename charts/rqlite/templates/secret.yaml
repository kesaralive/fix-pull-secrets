{{- $name := tpl (include "rqlite.fullname" .) $ -}}
{{- include "rqlite.generateSecrets" . }}
{{- $config := .Values.config }}
{{/*
List of additional generated system users which will be concatenated with the
user-suppplied list below
*/}}
{{- $internalUsers := list
     (dict "username" "_system_probes" "perms" (list "ready")
      "password" (.Release.rqlite.probePassword))
     (dict "username" "_system_rqlite" "perms" (list "all")
      "password" (.Release.rqlite.rqlitePassword))
}}
{{/* Construct the "sub" key for backup.json and restore.json */}}
{{- $backupStorage := dict
      "access_key_id" (dig "backup" "storage" "accessKeyId" nil $config)
      "secret_access_key" (dig "backup" "storage" "secretAccessKey" nil $config)
      "endpoint" (dig "backup" "storage" "endpoint" nil $config)
      "region" (dig "backup" "storage" "region" nil $config)
      "bucket" (dig "backup" "storage" "bucket" nil $config)
      "path" (dig "backup" "storage" "path" nil $config)
      "force_path_style" (dig "backup" "storage" "forcePathStyle" false $config)
}}
{{- $backup := dict }}
{{- $restore := dict }}
{{- if dig "backup" "autoBackup" "enabled" false $config }}
  {{- $backup = dict
        "version" 1
        "type" (dig "backup" "storage" "type" "s3" $config)
        "interval" (dig "backup" "autoBackup" "interval" nil $config)
        "vacuum" (dig "backup" "autoBackup" "vacuum" false $config)
        "no_compress" (dig "backup" "autoBackup" "noCompress" false $config)
        "sub" $backupStorage
  }}
{{- end }}
{{- if dig "backup" "autoRestore" "enabled" false $config }}
  {{- $restore = dict
        "version" 1
        "type" (dig "backup" "storage" "type" "s3" $config)
        "timeout" (dig "backup" "autoRestore" "timeout" "60s" $config)
        "continue_on_failure" (dig "backup" "autoRestore" "continueOnFailure" false $config)
        "sub" $backupStorage
  }}
{{- end }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ $name }}
  labels:
    {{- include "rqlite.labels" . | nindent 4 }}
type: Opaque
stringData:
  users.json: |-
    {{- if $config.users }}
    {{- $users := concat $internalUsers $config.users }}
    {{- tpl ($users | toPrettyJson) . | nindent 4}}
    {{- end }}

  {{- with $backup }}
  backup.json: |-
    {{- tpl (. | toPrettyJson) $ | nindent 4}}
  {{- end }}

  {{- with $restore }}
  restore.json: |-
    {{- tpl (. | toPrettyJson) $ | nindent 4}}
  {{- end }}

{{- include "rqlite.renderTLSFiles" (dict "value" "node" "ctx" $) | nindent 2 }}
{{- include "rqlite.renderTLSFiles" (dict "value" "client" "ctx" $) | nindent 2 }}
---
# Persist the generated passwords in the K8s cluster to ensure consistency if the chart is
# upgraded.
apiVersion: v1
kind: Secret
metadata:
  name: {{ $name }}-internal
  labels:
    {{- include "rqlite.labels" . | nindent 4 }}
type: Opaque
data:
  probePassword: {{ .Release.rqlite.probePassword | b64enc | quote }}
  rqlitePassword: {{ .Release.rqlite.rqlitePassword | b64enc | quote }}

---
apiVersion: v1
kind: Secret
metadata:
  name: {{ $name }}-extra
  labels:
    {{- include "rqlite.labels" . | nindent 4 }}
type: Opaque
stringData:
  {{- with .Values.extraFiles }}
    {{- tpl (toYaml .) $ | nindent 2 }}
  {{- end }}
